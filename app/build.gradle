plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.harishtk.app.wallpick"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField 'java.util.Hashtable<String, String>', 'SecureProps', makePropertyHashTable(getRootDir().getPath() + File.separator + 'secure.properties')
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'

    implementation "com.annimon:stream:1.2.2"
    implementation 'androidx.databinding:databinding-ktx:7.3.0-alpha01'

    // JetPack Compose
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation("androidx.navigation:navigation-compose:2.4.0-rc01")

    // Lifecycle
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.0-alpha01'

    // Kotlin Coroutines
    def coroutines_android_version = '1.3.7'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_android_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.38.1'
    implementation 'androidx.hilt:hilt-work:1.0.0'
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    kapt 'com.google.dagger:hilt-android-compiler:2.38.1'
    kapt 'com.google.dagger:dagger-android-processor:2.38.1'
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // Room
    def room_version = "2.4.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Navigation
    def nav_version = "2.3.0"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Work
    def work_version_old = "2.4.0"
    def work_version = "2.7.1"
    implementation "androidx.work:work-runtime:$work_version"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    def paging_version = "3.1.0"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation("androidx.paging:paging-compose:1.0.0-alpha14")

    def coil_version = "1.2.2"
    implementation "io.coil-kt:coil:$coil_version"

    // Okhttp
    implementation("com.squareup.okhttp3:okhttp:4.7.2")
    implementation('com.squareup.okhttp3:logging-interceptor:4.7.2')

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation "com.squareup.retrofit2:converter-moshi:2.4.0"

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    testImplementation 'junit:junit:4.13.2'

    // Unit testing
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation "org.robolectric:robolectric:4.4"
    testImplementation 'junit:junit:4.13.2'

    // Instrumented testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
}

def makePropertyHashTable(filename) {
    def devProperties = new Properties()
    try {
        devProperties.load(new FileInputStream(file(filename)))
    } catch (FileNotFoundException e) {
        devProperties = null
        System.out.println('devProperties value is null')
    }

    // result example: new Hashtable<String, Boolean>(){{ put(true, "a"); }};
    def prefix = 'new java.util.Hashtable<String, String>(){{ '
    def suffix = '}}'
    def value = ''
    if (devProperties != null) {
        for (d in devProperties) {
            value += String.format('put("%s","%s"); ', d.key, d.value)
        }
    }

    return String.format('%s%s%s', prefix, value, suffix)
}
